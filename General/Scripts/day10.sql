CREATE TABLE WEB_BOOKS( 
   Book_ID NUMBER PRIMARY KEY,
   Book_Title VARCHAR2(100),
   Book_Author varchar2(100)
);

CREATE TABLE web_BooksPrice( 
   BP_ID NUMBER PRIMARY KEY,
   BP_Price number
);

-- 도서 테이블에 값 추가
INSERT INTO web_books
--values(1, '위대한 개츠비', 'F. 스콧 피츠제럴드');
VALUES
--(2, '해리포터와 마법사의 돌', 'J.K. 롤링');
--(3, '1984', '조지오웰');
--(4, '오만과 편견', '제인 오스틴');
(5, '데미안', '헤르만 헤세');

SELECT * FROM WEB_BOOKS;
SELECT * FROM web_BooksPrice;

-- 도서 가격 테이블에 값 추가
INSERT INTO WEB_BOOKSPRICE
VALUES
--(1, 15000);
--(2, 18000);
--(3, 14000);
--(4, 17000);
--(5, 15000);

-- 내부조인
SELECT A.BOOK_ID, A.BOOK_TITLE, A.BOOK_AUTHOR, B.BP_ID
FROM WEB_BOOKS A INNER JOIN WEB_BOOKSPRICE B
   ON A.BOOK_ID = B.BP_ID;

  
SELECT * FROM WEB_BOOKS;
SELECT * FROM WEB_MEMBERS;
SELECT * FROM WEB_RENTALS;

CREATE TABLE WEB_MEMBERS( 
   MEM_ID NUMBER PRIMARY KEY,
   MEM_NAME VARCHAR2(100),
   MEM_PHONENUMBER VARCHAR2(100),
   MEM_EMAIL VARCHAR2(100)
);

CREATE TABLE WEB_RENTALS( 
   REN_ID NUMBER PRIMARY KEY,
   MEM_ID NUMBER,
   BOOK_ID NUMBER,
   REN_RENTALSDATE DATE,
   REN_RETURNDATE DATE,
   CONSTRAINT FK_MEMBER FOREIGN KEY(MEM_ID) REFERENCES WEB_MEMBERS(Mem_id),
   CONSTRAINT FK_BOOK FOREIGN KEY(BOOK_ID) REFERENCES WEB_BOOKS(BOOK_ID)
);

INSERT INTO WEB_MEMBERS 
--VALUES (1, '짱구', '123-456-7890', 'aaa@koreait.com');
--VALUES (2, '유리', '154-446-4680', 'bbb@koreait.com');
--VALUES (3, '철수', '558-995-7892', 'ccc@koreait.com');
--VALUES (4, '훈이', '156-456-1253', 'ddd@koreait.com');
--VALUES (5, '맹구', '125-425-6814', 'eee@koreait.com');


INSERT INTO WEB_RENTALS
--VALUES (1, 1, 3, TO_DATE('2023-12-11', 'YYYY-MM-DD'), TO_DATE('2023-12-18','YYYY-MM-DD'));
--VALUES (2, 2, 1, TO_DATE('2023-12-11', 'YYYY-MM-DD'), TO_DATE('2023-12-18','YYYY-MM-DD'));
--VALUES (3, 3, 1, TO_DATE('2023-12-13', 'YYYY-MM-DD'), TO_DATE('2023-12-20','YYYY-MM-DD'));
--VALUES (4, 4, 1, TO_DATE('2023-12-20', 'YYYY-MM-DD'), TO_DATE('2023-12-27','YYYY-MM-DD'));
--VALUES (5, 5, 5, TO_DATE('2023-12-22', 'YYYY-MM-DD'), TO_DATE('2023-12-29','YYYY-MM-DD'));

SELECT ROWNUM, R.REN_RENTALSDATE, M.MEM_NAME
FROM WEB_RENTALS R
JOIN WEB_MEMBERS M
ON R.MEM_ID = M.MEM_ID;

SELECT ROWNUM, B.BOOK_TITLE, R.REN_RETURNDATE 
FROM WEB_BOOKS B
JOIN WEB_RENTALS R
ON R.BOOK_ID = B.BOOK_ID;

SELECT M.MEM_NAME, B.BOOK_TITLE
FROM WEB_RENTALS R
INNER JOIN WEB_BOOKS B ON R.BOOK_ID = B.BOOK_ID
INNER JOIN WEB_MEMBERS M ON R.MEM_ID = M.MEM_ID;

ALTER TABLE WEB_MEMBERS ADD MEM_JOINUS DATE;

UPDATE WEB_MEMBERS
--SET MEM_JOINUS = TO_DATE('2023-11-01', 'YYYY-MM-DD')
--WHERE MEM_ID = 1;
--SET MEM_JOINUS = TO_DATE('2023-11-15', 'YYYY-MM-DD')
--WHERE MEM_ID = 2;
--SET MEM_JOINUS = TO_DATE('2023-11-28', 'YYYY-MM-DD')
--WHERE MEM_ID = 3;
--SET MEM_JOINUS = TO_DATE('2023-11-20', 'YYYY-MM-DD')
--WHERE MEM_ID = 4;
SET MEM_JOINUS = TO_DATE('2023-11-16', 'YYYY-MM-DD')
WHERE MEM_ID = 5;

SELECT * FROM DEPARTMENTS;
SELECT * FROM EMPLOYEES;

SELECT E.EMPLOYEE_ID, D.LOCATION_ID
FROM EMPLOYEES E
JOIN DEPARTMENTS D
ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
ORDER BY E.EMPLOYEE_ID;
-- FK를 설정하지 않은 행이 적은 테이블을 앞에 써주는 게 효율적이다. 적게 검사하기 때문이다.


-- 2. 회원이름과 대여한 책의 저자 조회
SELECT M.MEM_NAME, B.BOOK_AUTHOR
FROM WEB_RENTALS R
JOIN WEB_BOOKS B ON B.BOOK_ID = R.BOOK_ID
JOIN WEB_MEMBERS M ON M.MEM_ID = R.MEM_ID;


-- 3. MEMBERS 테이블의 각 회원이 대여한 도서의 수 조회(서브쿼리, 조인) -> 조인 사용 안해도 됨

SELECT M.MEM_NAME, ( 
					   SELECT COUNT(*)
					   FROM WEB_RENTALS R
					   WHERE R.MEM_ID = M.MEM_ID
					)
FROM WEB_MEMBERS M;

-- SELECT에서 가지고 올 컬럼을 ( ) 서브쿼리로 작성할 수 있다. 
-- 참고하는 전체 테이블은 멤버고 그 멤버 아이디와 렌탈의 멤버 아이디가 같은 것을 각각 COUNT 하면 5행 각각 1이 들어간 컬럼이 나온다.
-- 그리고 각 MEM_NAME도 같이 붙여주면 된다.
 

-- 4. 특정 도서 대여 이력, 회원 조회(위대한 개츠비)
-- WEB_MEMBERS 테이블과 WEB_RENTALS 테이블을 (    )기준으로 내부 조인
-- WEB_BOOKS 테이블의 (     )를 기준으로 내부조인
-- 특정 책 제목으로 대여한 회원과 대여 이력 조회

SELECT B.BOOK_TITLE 책제목, M.MEM_NAME 대여회원, R.REN_RENTALSDATE 대여일자
FROM WEB_RENTALS R
JOIN WEB_MEMBERS M ON M.MEM_ID = R.MEM_ID
JOIN WEB_BOOKS B ON B.BOOK_ID = R.BOOK_ID 
WHERE B.BOOK_TITLE = '위대한 개츠비';


SELECT *
FROM WEB_RENTALS R
LEFT OUTER JOIN WEB_MEMBERS M
ON M.MEM_ID = R.MEM_ID;


SELECT *
FROM EMPLOYEES E
WHERE TO_CHAR(HIRE_DATE, 'YYYY') = (SELECT TO_CHAR(HIRE_DATE, 'YYYY') FROM EMPLOYEES WHERE FIRST_NAME ='Laura');


