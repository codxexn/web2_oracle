CREATE TABLE WEB_STUDENT(
   STUDENT_NUMBER NUMBER,
   STUDENT_NAME VARCHAR2(1000),
   STUDENT_MATH NUMBER,
   STUDENT_ENG NUMBER,
   STUDENT_KOR NUMBER,
   STUDENT_GRADE VARCHAR2(1000)
);
-- 항상 만들고 확인하기
SELECT * FROM WEB_STUDENT;

--1. 학생 테이블에 데이터를 추가한다.
--학생번호, 이름, 수학, 영어, 국어
--1, '김철수', 90, 90, 90
--2, '홍길동', 70, 25, 55
--3, '이유리', 89, 91, 77
--4, '김웅이', 48, 100, 92
--5, '신짱구', 22, 13, 9

-- 2. 전체 학생들의 이름과 평균점수를 조회하기 (별칭도 넣기)
INSERT INTO WEB_STUDENT(
   STUDENT_NUMBER,
   STUDENT_NAME,
   STUDENT_MATH,
   STUDENT_ENG,
   STUDENT_KOR)
VALUES (5, '신짱구', 22, 13, 9);

-- 3. 학생의 평균점수를 구하고 학점을 수정하기
-- A : 90점 이상
-- B : 80점 이상 90점 미만
-- C : 50점 이상 80점 미만
-- F : 50점 미만
UPDATE WEB_STUDENT
SET STUDENT_GRADE = 'A'
WHERE (STUDENT_MATH + STUDENT_ENG + STUDENT_KOR) / 3 >= 90;

UPDATE WEB_STUDENT
SET STUDENT_GRADE = 'B'
WHERE (STUDENT_MATH + STUDENT_ENG + STUDENT_KOR) / 3 >= 80
AND (STUDENT_MATH + STUDENT_ENG + STUDENT_KOR) / 3 < 90;

UPDATE WEB_STUDENT
SET STUDENT_GRADE = 'C'
WHERE  (STUDENT_MATH + STUDENT_ENG + STUDENT_KOR) / 3 >= 50
AND (STUDENT_MATH + STUDENT_ENG + STUDENT_KOR) / 3 < 80;

UPDATE WEB_STUDENT
SET STUDENT_GRADE = 'F'
WHERE (STUDENT_MATH + STUDENT_ENG + STUDENT_KOR) / 3 < 50;

SELECT * FROM WEB_STUDENT;



SELECT STUDENT_NUMBER "학생 번호",
	STUDENT_NAME 이름,
	STUDENT_GRADE 학점
FROM WEB_STUDENT
WHERE NOT (STUDENT_MATH < 50 OR STUDENT_ENG < 50 OR STUDENT_KOR < 50)
AND STUDENT_GRADE = 'A' OR STUDENT_GRADE = 'B';


SELECT * FROM WEB_STUDENT;

DELETE FROM WEB_STUDENT 
WHERE (STUDENT_MATH < 30 OR STUDENT_ENG < 30 OR STUDENT_KOR < 30);


CREATE TABLE WEB_USER(
	USER_NAME VARCHAR2(100),
	USER_AGE NUMBER
);

SELECT * FROM WEB_MY_USER;

ALTER TABLE TBL_USER RENAME TO WEB_MY_USER;

ALTER TABLE WEB_MY_USER ADD(USER_GENDER CHAR(4));

ALTER TABLE WEB_MY_USER RENAME COLUMN USER_NAME TO USER_NICKNAME;

ALTER TABLE WEB_MY_USER DROP COLUMN USER_GENDER;

ALTER TABLE WEB_MY_USER MODIFY(USER_NICKNAME VARCHAR2(500));

INSERT INTO WEB_MY_USER (USER_NICKNAME, USER_AGE)
VALUES('하데스', 26);


CREATE TABLE WEB_CAR(
	CAR_NUMBER NUMBER CONSTRAINT PK_CAR PRIMARY KEY,
	CAR_NAME VARCHAR2(1000),
	CAR_BRAND VARCHAR2(1000),
	CAR_RELEASE_DATE DATE,
	CAR_COLOR VARCHAR2(1000),
	CAR_PRICE NUMBER
);

SELECT * FROM WEB_CAR;

CREATE TABLE WEB_ANIMAL(
	ANIMAL_NUMBER NUMBER CONSTRAINT PK_ANIMAL PRIMARY KEY,
	ANIMAL_KIND VARCHAR2(1000),
	ANIMAL_AGE NUMBER,
	ANIMAL_FEED VARCHAR2(1000)
);

SELECT * FROM WEB_ANIMAL;

ALTER TABLE WEB_ANIMAL ADD ANIMAL_GENDER CHAR(1);

ALTER TABLE WEB_ANIMAL RENAME COLUMN ANIMAL_NUMBER TO ANIMAL_NUM;

ALTER TABLE WEB_ANIMAL DROP COLUMN ANIMAL_FEED;

ALTER TABLE WEB_ANIMAL MODIFY ANIMAL_KIND VARCHAR2(1000);

INSERT INTO WEB_ANIMAL
VALUES(1, '고양이', 3, 'M');


CREATE TABLE WEB_PRODUCT(
	PRODUCT_NUMBER NUMBER CONSTRAINT PK_PRODUCT PRIMARY KEY, 
	PRODUCT_NAME VARCHAR2(1000),
	PRODUCT_PRICE NUMBER
);

SELECT * FROM WEB_PRODUCT;

INSERT INTO WEB_PRODUCT
VALUES(1, 'IPAD', 800000);

INSERT INTO WEB_PRODUCT
VALUES(2, 'MAC BOOK PRO', 2500000);


CREATE TABLE WEB_GIFT_LIST(
	GIFT_ID NUMBER CONSTRAINT PK_GIFT PRIMARY KEY,
	GIFT_NAME VARCHAR2(1000),
	PRODUCT_NUMBER NUMBER,
	CONSTRAINT FK_PRODUCT FOREIGN KEY(PRODUCT_NUMBER)
	REFERENCES WEB_PRODUCT(PRODUCT_NUMBER)
);

SELECT * FROM WEB_GIFT_LIST;












