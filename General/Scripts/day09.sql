
CREATE TABLE web_stu( 
   stu_studentID NUMBER PRIMARY KEY,
   stu_studentName varchar2(100) NOT null,
   stu_phonenumber varchar2(100),
   stu_age NUMBER,
   stu_subject varchar2(100)
);

INSERT INTO web_stu
values(1, '조승우', '010-1111-1111', 30, 'java');

INSERT INTO web_stu
values(2, '이동욱', '010-2222-2222', 30, 'java');

INSERT INTO web_stu
values(3, '김소현', '010-3333-3333', 26, 'dbms');

INSERT INTO web_stu
values(4, '김남길', '010-1111-2222', 25, 'dbms');

INSERT INTO web_stu
values(5, '강하늘', '010-1111-3333', 25, 'java');

INSERT INTO web_stu
values(6, '공유', '010-1111-4444', 27, 'dbms');

INSERT INTO web_stu
values(7, '박은빈', '010-1111-5555', 24, 'java');

INSERT INTO web_stu
values(8, '이종혁', '010-2222-1111', 31, 'java');

SELECT * FROM web_stu;

-- 1. 과목종류 검색
SELECT DISTINCT STU_SUBJECT FROM web_stu;

-- 2. 각 과목별 학생 수 조회
SELECT STU_SUBJECT, COUNT(*) 
FROM web_stu
GROUP BY STU_SUBJECT;

-- 3. 과목별 평균나이 조회
SELECT STU_SUBJECT, AVG(STU_AGE) 
FROM web_stu
GROUP BY STU_SUBJECT;

-- 4. 과목별 30살 이상인 학생수 조회
SELECT STU_SUBJECT, COUNT(*) 
FROM web_stu
WHERE STU_AGE >= 30
GROUP BY STU_SUBJECT;


-- 서브 쿼리

SELECT * FROM EMPLOYEES;

SELECT FIRST_NAME || ' ' || LAST_NAME 성명, 
		(SELECT FLOOR(AVG(SALARY)) FROM EMPLOYEES E2 WHERE E2.DEPARTMENT_ID = E1.DEPARTMENT_ID) 평균급여
FROM EMPLOYEES E1;

SELECT DEPARTMENT_ID 부서코드, FLOOR(AVG(SALARY)) 평균급여 
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
ORDER BY DEPARTMENT_ID DESC;



SELECT D.DEPARTMENT_NAME 부서명, FLOOR(AVG(E.SALARY)) 평균급여
FROM EMPLOYEES E
	LEFT OUTER JOIN DEPARTMENTS D 
	ON E.DEPARTMENT_ID = D.DEPARTMENT_ID 
GROUP BY D.DEPARTMENT_NAME
ORDER BY 평균급여 DESC;

-- 급여의 평균보다 적은 사원의 사원번호, 이름, 급여, 부서번호 출력

SELECT EMPLOYEE_ID 사원번호, FIRST_NAME || ' ' || LAST_NAME 성명, SALARY 급여, DEPARTMENT_ID 부서번호
FROM EMPLOYEES E1
WHERE E1.SALARY < (SELECT AVG(SALARY)FROM EMPLOYEES E2)
ORDER BY 사원번호;

-- 사원번호가 123인 사원의 직업과 같은 사원의 사원번호

SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, SALARY
FROM EMPLOYEES
WHERE JOB_ID = (SELECT JOB_ID FROM EMPLOYEES WHERE EMPLOYEE_ID = 123);

SELECT EMPLOYEE_ID,
FROM EMPLOYEES


SELECT MANAGER_ID, COUNT(*) 
FROM EMPLOYEES
GROUP BY MANAGER_ID
HAVING COUNT(MANAGER_ID) = (SELECT MAX(COUNT(*)) FROM EMPLOYEES GROUP BY MANAGER_ID);
-- 그룹화된 결과에 대한 조건을 설정하는 것이 HAVING

-- DEPARTMENT_ID 가 50의 최고급여를 받는 사원보다 더 많은 급여를 받는 사원들의 사원번호, 이름, 직업, 급여

SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, SALARY, DEPARTMENT_ID  FROM EMPLOYEES
WHERE SALARY > (SELECT MAX(SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID = 50)
AND EMPLOYEES.DEPARTMENT_ID <> 30
ORDER BY DEPARTMENT_ID;


SELECT EMPLOYEE_ID, SALARY FROM EMPLOYEES
ORDER BY SALARY;

SELECT DEPARTMENT_ID, COUNT(*) 
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM EMPLOYEES GROUP BY DEPARTMENT_ID);


SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, SALARY, MANAGER_ID 
FROM EMPLOYEES
WHERE JOB_ID = (SELECT JOB_ID FROM EMPLOYEES WHERE EMPLOYEE_ID = 123)
AND SALARY > (SELECT SALARY FROM EMPLOYEES WHERE EMPLOYEE_ID = 155);

-- ROWNUM
-- 컬럼처럼 사용하면 된다.
-- *을 다름 컬럼과 함께 조회하게 되면 소속을 명시해주어야 한다.
-- 그러므로 테이블에 ALIAS 를 부여하고 해당 별칭을 *에 명시해준다.


SELECT ROWNUM, E.* FROM EMPLOYEES E
ORDER BY E.SALARY DESC;

-- 연봉 1~5위까지
SELECT ROWNUM, E2.*
FROM(SELECT * FROM EMPLOYEES
	ORDER BY SALARY DESC) E2
WHERE ROWNUM < 6;

-- 연봉 6~10위까지
SELECT *
	FROM (SELECT ROWNUM R, E2.*
	FROM (SELECT * FROM EMPLOYEES
		ORDER BY SALARY DESC) E2) E1
WHERE R BETWEEN 6 AND 10;		

-- 실습
CREATE TABLE web_stu (
  stu_StudentID number PRIMARY KEY,
  stu_StudentName varchar2(100) NOT NULL,
  stu_phonenumber varchar2(100),
  stu_Age number,
  stu_Department varchar2(100)
);

DROP TABLE web_stu;


INSERT INTO web_stu
VALUES (1, '조승우', '010-8901-8888', 30, '교육학과');

INSERT INTO web_stu
VALUES (2, '이동욱', '010-9012-9999', 30, '컴퓨터 공학과');

INSERT INTO web_stu
VALUES (3, '김소현', '010-9876-1234', 20, '방송연예과');

INSERT INTO web_stu
VALUES (4, '김남길', '010-5050-1222', 26, '컴퓨터 공학과');

INSERT INTO web_stu
VALUES (5, '강하늘', '010-5111-5151', 22, '방송연예과');

INSERT INTO web_stu
VALUES (6, '공유', '010-5050-5151', 30, '컴퓨터 공학과');

INSERT INTO web_stu
VALUES (7, '이종혁', '010-1213-2222', 34, '방송연예과');

INSERT INTO web_stu
VALUES (8, '박은빈', '010-1213-2222', 20, '방송연예과');

SELECT * FROM web_stu;


-- 나이가 25세 이상
SELECT ROWNUM, WS1.*
	FROM (SELECT *
	FROM WEB_STU
	WHERE STU_AGE > 25) WS1;
	

-- 2. 학생의 이름과 나이를 함께 조회
-- select
SELECT ROWNUM, STU_STUDENTNAME, STU_AGE 
	FROM (SELECT *
	FROM WEB_STU
	WHERE STU_AGE > 25) WS1;

SELECT WS.STU_STUDENTID, WS.STU_STUDENTNAME, WS.STU_AGE
	FROM (SELECT * FROM WEB_STU WHERE STU_STUDENTID = 2)WS;


-- 3. 학과별 평균 나이를 계산하는 서브쿼리
-- group by / having
SELECT ROWNUM, WS1.*
	FROM (SELECT STU_DEPARTMENT, FLOOR(AVG(STU_AGE)) 
	FROM WEB_STU
	GROUP BY STU_DEPARTMENT
	HAVING AVG(STU_AGE) > (SELECT AVG(STU_AGE) FROM WEB_STU)) WS1;


-- 4. 나이가 가장 많은 학생부터 가장 어린 학생순으로 정렬
-- order by
SELECT ROWNUM, WS1.*
	FROM (SELECT *
	FROM WEB_STU
	ORDER BY STU_AGE DESC, STU_STUDENTNAME ASC) WS1;








