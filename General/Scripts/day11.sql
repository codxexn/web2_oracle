SELECT * FROM EMPLOYEES e
WHERE DEPARTMENT_ID = 30;

SELECT * FROM EMPLOYEES e
WHERE DEPARTMENT_ID = 10;


SELECT * FROM EMPLOYEES e
WHERE DEPARTMENT_ID = 30
UNION
SELECT * FROM EMPLOYEES e
WHERE DEPARTMENT_ID = 10;

SELECT * FROM EMPLOYEES e
WHERE SALARY BETWEEN 2000 AND 2500;

SELECT * FROM EMPLOYEES e
WHERE SALARY BETWEEN 2000 AND 2500
UNION ALL
SELECT * FROM EMPLOYEES e
WHERE SALARY BETWEEN 1500 AND 3000;

-- 열의 수가 다르면 UNION을 사용할 수 없다.
-- 열의 타입이 다르면 UNION을 사용할 수 없다.
SELECT * FROM EMPLOYEES e;
SELECT * FROM DEPARTMENTS d;

-- 열의 수가 열의 데이터 유형이 일치해야 한다.
SELECT MANAGER_ID, DEPARTMENT_ID
FROM EMPLOYEES e 
UNION
SELECT MANAGER_ID, DEPARTMENT_ID
FROM DEPARTMENTS d;

SELECT MANAGER_ID, DEPARTMENT_ID 
FROM EMPLOYEES e 
UNION ALL
SELECT MANAGER_ID, DEPARTMENT_ID
FROM DEPARTMENTS d;

-- 교집합(INTERSECT)
SELECT * FROM EMPLOYEES e
WHERE DEPARTMENT_ID = 30;
--INTERSECT
SELECT * FROM EMPLOYEES e2
WHERE SALARY > 2500;

-- 교집합(INTERSECT)
SELECT * FROM EMPLOYEES e
WHERE DEPARTMENT_ID = 30
MINUS
SELECT * FROM EMPLOYEES e2
WHERE SALARY > 2500;

-- 연습
SELECT * FROM EMPLOYEES e;
SELECT * FROM JOBS j;
SELECT * FROM DEPARTMENTS d;

--1)  EMPLOYEES 테이블에서 JOB_ID가 SA_REP 인 직원과 JOBS 테이블에서 JOB_TITLE이
-- Sales Representative 직업의 교집합 조회
SELECT JOB_ID FROM EMPLOYEES e
WHERE JOB_ID = 'SA_REP'
INTERSECT
SELECT JOB_ID FROM JOBS j
WHERE JOB_TITLE = 'Sales Representative';

-- 조인 사용
SELECT e.FIRST_NAME || ' ' || e.LAST_NAME , e.JOB_ID, j.JOB_TITLE FROM EMPLOYEES e
JOIN JOBS j
ON j.JOB_ID = e.JOB_ID
WHERE e.JOB_ID = 'SA_REP' AND j.JOB_TITLE = 'Sales Representative';



--2) EMPLOYEES 테이블에서 JOB_ID가 FI_MGR인 직원과 JOBS테이블에서 JOB_TITLER
-- Finance Manager 직업의 차집합 조회
SELECT JOB_ID FROM EMPLOYEES e
WHERE JOB_ID = 'FI_MGR'
MINUS
SELECT JOB_ID FROM JOBS j
WHERE JOB_TITLE = 'Finace Manager';

-- 조인 사용
SELECT * FROM EMPLOYEES e
JOIN JOBS j
ON j.JOB_ID = e.JOB_ID
WHERE e.JOB_ID = 'FI_MGR' AND j.JOB_TITLE = 'Finance Manager';


-- 3) JOBS 테이블에서 JOB_TITLE의 모든 값과 DEPARTMENTS 테이블에서
-- DEPARTMENTS_NAME 열의 모든 값의 합집합 조회
SELECT JOB_TITLE FROM JOBS j
UNION ALL 
SELECT DEPARTMENT_NAME FROM DEPARTMENTS d;

-- 조인 사용
SELECT E.FIRST_NAME, J.JOB_TITLE, D.DEPARTMENT_NAME FROM EMPLOYEES e
LEFT OUTER JOIN JOBS j
ON J.JOB_ID = E.JOB_ID 
LEFT OUTER JOIN DEPARTMENTS d
ON D.DEPARTMENT_ID = E.DEPARTMENT_ID;



-- 4) JOBS 테이블에서 JOB_ID의 모든 값과 DEMPARTMENTS 테이블에서
-- DEPARTMENTS_ID열의 차집합 조회
SELECT JOB_ID FROM JOBS j
MINUS
SELECT TO_CHAR(DEPARTMENT_ID) FROM DEPARTMENTS d;

SELECT E.FIRST_NAME, J.JOB_ID, D.DEPARTMENT_ID FROM EMPLOYEES e
LEFT OUTER JOIN JOBS j
ON J.JOB_ID = E.JOB_ID 
LEFT OUTER JOIN DEPARTMENTS d
ON D.DEPARTMENT_ID = E.DEPARTMENT_ID;

SELECT * FROM WEB_MEMBERS;
SELECT * FROM WEB_RENTALS;

CREATE VIEW WEB_MEMBERSRENTALS AS 
SELECT M.MEM_ID, M.MEM_NAME, R.REN_ID, R.BOOK_ID, R.REN_RENTALSDATE
FROM WEB_MEMBERS M INNER JOIN WEB_RENTALS R ON M.MEM_ID = R.MEM_ID;

SELECT * FROM EMPLOYEES;
SELECT * FROM WEB_MEMBERSRENTALS;
SELECT * FROM WEB_MEMBERSMANAGER;

CREATE VIEW WEB_MEMBERSMANAGER AS
SELECT E1.FIRST_NAME || ' ' || E1.LAST_NAME 사원이름,
E2.FIRST_NAME || ' ' || E2.LAST_NAME 매니저이름
FROM EMPLOYEES E1 JOIN EMPLOYEES E2 ON  E1.MANAGER_ID = E2.EMPLOYEE_ID;

--권한 부여
GRANT UPDATE, DELETE, INSERT ON EMPLOYEES TO WEBTEST;

--권한 회수
REVOKE SELECT, UPDATE, DELETE, INSERT ON EMPLOYEES FROM WEBTEST;



